## 3th Party Script ##

HTML deki script tagı yoluyla eklenecek kodların optimize edilebilmesi için NextJs
Script componentini önermektedir.

exp: 
<head>
<title>First Post</title>
<script src="https://connect.facebook.net/en_US/sdk.js" />
</head>


!!! important: 
Klasik yöntemle eklenen script ler sayfadaki elementler yüklenmeden
veya hydration gerçekleşmeden yapıldığı için ciddi performans
sorunlarına veya hatalara yol açabilir.



exp:
import Script from 'next/script';

<Script
src="https://connect.facebook.net/en_US/sdk.js"
strategy="lazyOnload" />

--> strategy <--

1- beforeInteractive: Nextjs kodlarından önce yükler.

2- afterInteractive: (default) Nextjs kodlarından sonra yükler.

3- lazyOnload: Tüm yükleme bitip, browser boşa çıktantan sonra yükler.

4- worker: (experimental) Web worker olarak yükler.



!!! important: Sayfayı ilgilendiren scriptler ilgili sayfada segmenti ilgilendiren scriptler ise
layout.js dosyasında eklenir.


---------------------------------------------------------

Hydration:
İlk yükleme ile gelen statik HTML in, daha sonradan yüklenen JS ile gelen HTML ile
eşleştirilmesi ve statik içeriğin dinamiklik kazanması işlemine hydration denir. Bu
aşamada eşleştirmeden kaynaklı hydration hataları oluşabilir.

---------------------------------------------------------

Static & Dynamic Rendering:
React componentlerinin HTML haline dönüştürülmesi ve sayfaya yerleştirilmesi
işlemine rendering denir. Rendering işlemi static veya dynamic olabilir.

Static Rendering: Data nın çekilmesi (fetching) ve rendering işlemi uygulama build
edilirken yapılır ve elde edilen sonuç istendiğinde gönderilmesi için server da cache lenir.

Dynamic Rendering:
Rendering işlemi server da, her kullanıcı talebinde gerçekleştirilir.


* Eğer sayfada dynamic routing yoksa
* Veya eğer aşağıdaki segment option lardan herhangi birisi yoksa;

export const dynamic = 'force-dynamic'  --> dinamik olmaya zorlar
export const revalidate = 0 --> fetch'ler icin kullanilir, yine dinamik olmaya zorlar

* Veya eğer aşağıdaki segment option varsa

export const dynamic = 'force-static'  --> statik olmaya zorlar
export const revalidate = 'force-cache' --> statik olmaya zorlar


Dynamic Rendering - Faydaları:

 Gerçek zamanlı data paylaşılmasını sağlar
 Kullanıcıya özel içerik oluşturulabilir
 Cookie veya params, search params gibi
request time da erişilebilecek veriyi
kullanma imkanı sunar.


Ne zaman kullanılır?
 Data çok sık değişiyorsa
 User panel, profile veya basket gibi
kullanıcıya özel sayfalar oluşturulacaksa

---------------------------------------------------------


!!! important:
For production Image Optimization with Next.js, the optional 'sharp' package is strongly recommended. Run 'npm i sharp', and Next.js will use it automatically for Image Optimization.


---------------------------------------------------------

Rendering : 
* NextJs 13’ten itibaren, aksi belitilmedikçe componentler server tarafında
render edilmektedir.

* Client ta rendering edilen bir component in içindekiler de ("use client" belirtmesek dahi) client ta render edilir.


---------------------------------------------------------




















